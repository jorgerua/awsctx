#!/usr/bin/env bash
#
# AWSCTX is a tool to switch aws profiles context

[[ -n $DEBUG ]] && set -x

set -eou pipefail

AWSCTX_DIR="${XDG_DATA_HOME:-$HOME/.aws/.awsctx}"

usage() {
  local SELF
  SELF="awsctx"

  cat <<EOF
USAGE:
  $SELF                    : list the profiles in the current credentials file
  $SELF <NAME>             : change the active namespace of current context
  $SELF -                  : switch to the previous namespace in this context
  $SELF -c, --current      : show the current namespace
  $SELF -h,--help          : show this message
EOF
}

current_profile() {
  ${AWSCLI} configure get default.awsctx.profile || echo ""
}

get_profiles() {
  ${AWSCLI} configure list-profiles
}

get_current_profile() {
  local p=$(current_profile)

  if [[ -n "${p}" ]]; then
    echo "${p}"
  else
    echo "No current profile set.">&2
  fi
}

list_profiles() {
  local yellow darkbg normal
  yellow=$(tput setaf 3 || true)
  darkbg=$(tput setab 0 || true)
  normal=$(tput sgr0 || true)

  local cur_ctx_fg cur_ctx_bg
  cur_ctx_fg=${AWSCTX_CURRENT_FGCOLOR:-$yellow}
  cur_ctx_bg=${AWSCTX_CURRENT_BGCOLOR:-$darkbg}

  local cur p_list
  cur="$(current_profile)" || exit_err "error getting current profile"
  p_list=$(get_profiles) || exit_err "error getting profile list"

  for c in $p_list; do
  if [[ -n "${_AWSCTX_FORCE_COLOR:-}" || \
       -t 1 && -z "${NO_COLOR:-}" ]]; then
    # colored output mode
    if [[ "${c}" = "${cur}" ]]; then
      echo "${cur_ctx_bg}${cur_ctx_fg}${c}${normal}"
    else
      echo "${c}"
    fi
  else
    echo "${c}"
  fi
  done
}

switch_profile() {
    local p="${1}"
    local session="$(${AWSCLI} configure get ${p}.sso_session)"
    local account="$(${AWSCLI} configure get ${p}.sso_account_id)"
    local role="$(${AWSCLI} configure get ${p}.sso_role_name)"
    
    ${AWSCLI} configure set default.sso_session "${session}"
    ${AWSCLI} configure set default.sso_account_id "${account}"
    ${AWSCLI} configure set default.sso_role_name "${role}"
    ${AWSCLI} configure set default.awsctx.profile "${p}"

    echo "Active profile is \"${p}\".">&2
}

read_prev_profile() {
  ${AWSCLI} configure get default.awsctx.prev || echo ""
}

save_prev_profile() {
  local p="${1}"
  ${AWSCLI} configure set default.awsctx.prev "${p}"
}

set_profile() {
  local prev
  prev="$(current_profile)" || exit_error "error getting current profile"

  if grep -q ^"${1}"\$ <(get_profiles); then
    switch_profile "${1}"

    if [[ "${prev}" != "${1}" ]]; then
      save_prev_profile "${prev}"
    fi
  else
    echo "error: no profile exists with name \"${1}\".">&2
    exit 1
  fi    
}

swap_namespace() {
  local p
  p="$(read_prev_profile)"

  if [[ -z "${p}" ]]; then
    echo "error: no previous profile found." >&2
    exit 1
  fi

  set_profile "${p}"

}

main() {

    #check if aws cli is installed
    if [[ -z "${AWSCLI:-}" ]]; then
        if hash aws 2> /dev/null; then
            AWSCLI=aws
        else
            echo >&2 "Aws CLI is not installed"
            exit 1
        fi
    fi

    if [[ "$#" -eq 0 ]]; then
        list_profiles
    elif [[ "$#" -eq 1 ]]; then
        
        if [[ "${1}" == "-h" || "${1}" == "--help" ]]; then
            usage

        elif [[ "${1}" == "-c" || "${1}" == "--current" ]]; then
            get_current_profile

        elif [[ "${1}" == "-" ]]; then
            swap_namespace

        elif [[ "${1}" =~ ^-(.*) ]]; then
            echo "error: unrecognized flag \"${1}\"" >&2
            usage
            exit 1
        else
            set_profile "${1}"
        fi
    else
        echo "Too many arguments" >&2
        usage
        exit 1
    fi

}

main "$@"